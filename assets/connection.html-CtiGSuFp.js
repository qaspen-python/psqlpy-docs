import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as e}from"./app-4-zV2tR9.js";const t={},o=e(`<p><code>Connection</code> object represents single connection to the <code>PostgreSQL</code>. You must work with database within it.<br><code>Connection</code> get be made with <code>PSQLPool().connection()</code> method.</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> psqlpy <span class="token keyword">import</span> PSQLPool


db_pool<span class="token punctuation">:</span> Final <span class="token operator">=</span> PSQLPool<span class="token punctuation">(</span>
    dsn<span class="token operator">=</span><span class="token string">&quot;postgres://postgres:postgres@localhost:5432/postgres&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="connection-methods" tabindex="-1"><a class="header-anchor" href="#connection-methods"><span>Connection methods</span></a></h2><h3 id="execute" tabindex="-1"><a class="header-anchor" href="#execute"><span>Execute</span></a></h3><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters:</span></a></h4><ul><li><code>querystring</code>: Statement string.</li><li><code>parameters</code>: List of parameters for the statement string.</li><li><code>prepared</code>: Prepare statement before execution or not.</li></ul><p>You can execute any query directly from <code>Connection</code> object.<br> This method supports parameters, each parameter must be marked as <code>$&lt;number&gt;</code> in querystring (number starts with 1).</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
    results<span class="token punctuation">:</span> QueryResult <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        <span class="token string">&quot;SELECT * FROM users WHERE id = $1 and username = $2&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&quot;Alex&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>

    dict_results<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> results<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transaction" tabindex="-1"><a class="header-anchor" href="#transaction"><span>Transaction</span></a></h3><p><code>Connection</code> is the only object that can be used to build <code>Transaction</code> object.</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters:</span></a></h4><ul><li><code>isolation_level</code>: level of isolation. Default how it is in PostgreSQL.</li><li><code>read_variant</code>: configure read variant of the transaction. Default how it is in PostgreSQL.</li><li><code>deferrable</code>: configure deferrable of the transaction. Default how it is in PostgreSQL.</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> psqlpy <span class="token keyword">import</span> IsolationLevel<span class="token punctuation">,</span> ReadVariant

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    connection <span class="token operator">=</span> <span class="token keyword">await</span> db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>
    transaction <span class="token operator">=</span> connection<span class="token punctuation">.</span>transaction<span class="token punctuation">(</span>
        isolation_level<span class="token operator">=</span>IsolationLevel<span class="token punctuation">.</span>Serializable<span class="token punctuation">,</span>
        read_variant<span class="token operator">=</span>ReadVariant<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">,</span>
        deferrable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),c=[o];function i(p,l){return a(),s("div",null,c)}const d=n(t,[["render",i],["__file","connection.html.vue"]]),k=JSON.parse('{"path":"/introduction/components/connection.html","title":"Connection","lang":"en-US","frontmatter":{"title":"Connection","description":"Connection object represents single connection to the PostgreSQL. You must work with database within it. Connection get be made with PSQLPool().connection() method. Connection m...","head":[["meta",{"property":"og:url","content":"https://github.com/qaspen-python/psqlpy/psqlpy-docs/introduction/components/connection.html"}],["meta",{"property":"og:title","content":"Connection"}],["meta",{"property":"og:description","content":"Connection object represents single connection to the PostgreSQL. You must work with database within it. Connection get be made with PSQLPool().connection() method. Connection m..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-15T18:44:28.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-15T18:44:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Connection\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-15T18:44:28.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Connection methods","slug":"connection-methods","link":"#connection-methods","children":[{"level":3,"title":"Execute","slug":"execute","link":"#execute","children":[]},{"level":3,"title":"Transaction","slug":"transaction","link":"#transaction","children":[]}]}],"git":{"createdTime":1710182756000,"updatedTime":1710528268000,"contributors":[{"name":"chandr-andr (Kiselev Aleksandr)","email":"askiselev00@gmail.com","commits":3}]},"readingTime":{"minutes":0.66,"words":198},"filePathRelative":"introduction/components/connection.md","localizedDate":"March 11, 2024","autoDesc":true}');export{d as comp,k as data};
